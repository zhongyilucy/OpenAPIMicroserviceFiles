{
  "openapi": "3.0.3",
  "info": {
    "title": "Application Management API",
    "description": "Service to manage applications inside the system",
    "contact": {
      "name": "mimik technology inc.",
      "url": "https://developers.mimik.com/",
      "email": "support.sdk@mimik.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "2.0.0"
  },
  "tags": [
    {
      "name": "Admin",
      "description": "Admin user calls"
    },
    {
      "name": "System",
      "description": "Server to server calls"
    },
    {
      "name": "Edge",
      "description": "edge calls"
    }
  ],
  "paths": {
    "/services": {
      "get": {
        "tags": [
          "Admin",
          "Edge"
        ],
        "summary": "List all the registered services",
        "description": "By passing in the appropriate options, you can search for available services in the system.",
        "operationId": "searchServices",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "The start date for defining the interval in which the service was registered",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date for defining the interval in which the service was registered",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "externalId",
            "in": "query",
            "description": "The external id of the service. All the versions will be returned",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of the services with matching criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Service"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "SystemSecurity": [
              "read:services"
            ]
          },
          {
            "AdminSecurity": [
              "read:services"
            ]
          }
        ],
        "x-swagger-router-controller": "mServiceController"
      },
      "post": {
        "tags": [
          "Admin",
          "System"
        ],
        "summary": "Register an service",
        "description": "Register an service into the system.<p>A new version of the service is considered to be a new resource with the same `externalId` but a different `version`.",
        "operationId": "createService",
        "requestBody": {
          "description": "The information to create an service",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewService"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The created service",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Service"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "AdminSecurity": [
              "create:service"
            ]
          },
          {
            "SystemSecurity": [
              "create:service"
            ]
          }
        ],
        "x-swagger-router-controller": "mServiceController",
        "x-codegen-request-body-name": "newService"
      }
    },
    "/services/{id}": {
      "get": {
        "tags": [
          "Admin",
          "System",
          "Edge"
        ],
        "summary": "Get service",
        "description": "Get the service associated with the given id.",
        "operationId": "getService",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The service with the given id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Service"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "AdminSecurity": [
              "read:service"
            ]
          },
          {
            "SystemSecurity": [
              "read:service"
            ]
          }
        ],
        "x-swagger-router-controller": "mServiceController"
      },
      "delete": {
        "tags": [
          "Admin"
        ],
        "summary": "Delete service",
        "description": "Delete the service associated with given id.<p>A check for service assignement to devices is made. If an association exist the request will return an `unprocessable` error.",
        "operationId": "deleteService",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The id of the deleted service",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "AdminSecurity": [
              "delete:service"
            ]
          }
        ],
        "x-swagger-router-controller": "mServiceController"
      }
    },
    "/services/{id}/devices": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Get devices associated to service",
        "description": "Get all the devices associated to the given service.<p>The response will also contains the association details and an optional errors if some of the requests to get the device have failed.",
        "operationId": "getAssociationDevicesService",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Defines the number of devices to return in a given page, should the call want data returned using pagination.",
            "required": true,
            "schema": {
              "maximum": 100,
              "minimum": 10,
              "type": "integer",
              "default": 50
            }
          },
          {
            "name": "startAfter",
            "in": "query",
            "description": "Defines the id of the last record from previous page.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of associated devices, a list of corresponding associations and an optional list of errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Device"
                      }
                    },
                    "associations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ServiceAssociation"
                      }
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "AdminSecurity": [
              "read:associatedservice"
            ]
          }
        ],
        "x-swagger-router-controller": "mServiceController"
      },
      "post": {
        "tags": [
          "Admin",
          "System"
        ],
        "summary": "Create association service to devices",
        "description": "Associate the service with the given id to a list of devices using the associated `nodeId`. <p>This request triggers sending a notification to each device via the notification service.<p>Since it is a many operation requests if all the fails an `unprocessable` error will be returned, otherwise a `created` response will returned with an optional errors property if some the request have failed.<p>Warnings can be added to the response to indicated that the association may create inconsistencies ofr other applications.",
        "operationId": "createAssociationDevicesService",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "A list of devices by their nodeId to be associated with the service with the given id",
          "content": {
            "application/json": {
              "schema": {
                "maxItems": 10,
                "minItems": 1,
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "A list of associated devices, a list of corresponding associations and an optional list of errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Device"
                      }
                    },
                    "associations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ServiceAssociation"
                      }
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Error"
                      }
                    },
                    "warnings": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {}
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "AdminSecurity": [
              "create:associatedservice"
            ]
          },
          {
            "SystemSecurity": [
              "create:associatedservice"
            ]
          }
        ],
        "x-swagger-router-controller": "mServiceController",
        "x-codegen-request-body-name": "nodeIds"
      }
    },
    "/services/{id}/devices/{nodeId}": {
      "put": {
        "tags": [
          "Edge"
        ],
        "summary": "Update the association status",
        "description": "Update the association from `pending` to `completed`.<p>The `externalId` will be used to check any other associations with the same externalId and to delete them since the device is not associated with previous version of the service.",
        "operationId": "updateAssociationDeviceService",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "nodeId",
            "in": "path",
            "description": "The nodeId of the device",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "update that needs to be posted",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatusUpdateInfo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated association",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ServiceAssociation"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "SystemSecurity": [
              "update:associatedservice"
            ]
          }
        ],
        "x-swagger-router-controller": "mServiceController",
        "x-codegen-request-body-name": "updateInfo"
      },
      "delete": {
        "tags": [
          "Edge"
        ],
        "summary": "Delete the associated device",
        "description": "Delete the associated device from the given service",
        "operationId": "deleteAssociationDeviceService",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "nodeId",
            "in": "path",
            "description": "The nodeId of the device",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The node id and id of the service",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The id of the service",
                          "format": "uuid"
                        },
                        "nodeId": {
                          "type": "string",
                          "description": "The nodeId of the device"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": [
          {
            "SystemSecurity": [
              "delete:associatedservice"
            ]
          }
        ],
        "x-swagger-router-controller": "mServiceController"
      }
    }
  },
  "components": {
    "schemas": {
      "Error": {
        "required": [
          "message",
          "statusCode",
          "title"
        ],
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "format": "int32"
          },
          "title": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "info": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "StatusUpdateInfo": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "notificationReceived",
              "cancelledByUser",
              "failed",
              "completed",
              "deployed"
            ]
          },
          "statusReason": {
            "type": "string",
            "example": "Any reason that needs to be documented for status"
          }
        }
      },
      "StatusUpdate": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "postedAt": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "ServiceBase": {
        "required": [
          "externalId",
          "version"
        ],
        "type": "object",
        "properties": {
          "externalId": {
            "minLength": 1,
            "type": "string",
            "description": "Id of the service in referring to other system",
            "example": "anExternalIdForService"
          },
          "version": {
            "type": "string",
            "description": "Version of the service",
            "example": "2.3.1"
          }
        }
      },
      "NewService": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ServiceBase"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "minLength": 1,
                "type": "string",
                "description": "Name of the service",
                "example": "A test service"
              },
              "description": {
                "minLength": 1,
                "type": "string",
                "description": "Describes what the service is about",
                "example": "Test service to make the API active"
              },
              "payloadReference": {
                "type": "string",
                "description": "URL pointing to the payload of the service",
                "format": "uri",
                "example": "http://abc.com/1234"
              },
              "environmentVariables": {
                "type": "array",
                "description": "Environment variables associated with the service",
                "items": {
                  "required": [
                    "name",
                    "value"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "minLength": 1,
                      "type": "string",
                      "description": "Name of the environment variable",
                      "example": "an environement variable"
                    },
                    "value": {
                      "minLength": 1,
                      "type": "string",
                      "description": "Value of the environment variable",
                      "example": "a value for an environment variable"
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "ServiceId": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Service Id",
            "format": "uuid"
          }
        }
      },
      "Service": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NewService"
          },
          {
            "$ref": "#/components/schemas/ServiceId"
          },
          {
            "type": "object",
            "properties": {
              "createdAt": {
                "type": "string",
                "description": "Time of the registration of the service",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "description": "Time of the latest update on the service",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "NewServiceAssociation": {
        "required": [
          "nodeId",
          "serviceId",
          "status"
        ],
        "type": "object",
        "properties": {
          "serviceId": {
            "type": "string",
            "description": "Id of the service part of the association",
            "format": "uuid"
          },
          "nodeId": {
            "type": "string",
            "description": "Id of the device part of the association"
          },
          "status": {
            "type": "string",
            "description": "Status of the relationship pending -> compeleted",
            "default": "pending",
            "enum": [
              "pending",
              "notificationReceived",
              "cancelledByUser",
              "failed",
              "completed",
              "deployed"
            ]
          }
        }
      },
      "ServiceAssociation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NewServiceAssociation"
          },
          {
            "$ref": "#/components/schemas/ServiceBase"
          },
          {
            "type": "object",
            "properties": {
              "statusUpdates": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StatusUpdate"
                }
              },
              "createdAt": {
                "type": "string",
                "description": "Time of the association with the device is done",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "description": "Time of the latest update of the association",
                "format": "date-time"
              }
            }
          }
        ]
      }
    },
    "securitySchemes": {
      "SystemSecurity": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://mimik.auth0.com/auth/token",
            "scopes": {
              "create:app": "register an application",
              "read:apps": "Get all the registered applications",
              "read:app": "Get the application designated by the id",
              "create:service": "register a service",
              "read:services": "Get all the registered services",
              "read:service": "Get the service designated by the id",
              "create:associatedapp": "Create an association device with app",
              "create:associatedservice": "Create an association device with service",
              "update:associatedapp": "Update the status of an association",
              "update:associatedservice": "Update the status of an association",
              "delete:associatedapp": "Delete association between a device and an app",
              "delete:associatedservice": "Delete association between a device and an service",
              "create:device": "Create a device",
              "delete:device": "Delete a device",
              "read:device": "Get the device with the given deviceId",
              "read:appservices": "Get the list of services for a given application"
            }
          }
        }
      },
      "AdminSecurity": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://mimik.auth0.com/auth/token",
            "scopes": {
              "read:system": "Read the system information",
              "read:apps": "Get all the registered applications",
              "read:app": "Get the application designated by the id",
              "create:app": "Create an application",
              "delete:app": "Delete an application",
              "read:services": "Get all the registered services",
              "read:service": "Get the service designated by the id",
              "create:service": "Create a service",
              "delete:service": "Delete a service",
              "read:associatedapp": "Get all the devices associated with app",
              "read:associatedservice": "Get all the devices associated with service",
              "create:associatedapp": "Create an association device with app",
              "create:associatedservice": "Create an association device with service",
              "delete:associatedapp": "Delete association between a device and an app",
              "delete:associatedservice": "Delete association between a device and an service",
              "create:device": "Create a device",
              "delete:device": "Delete a device",
              "read:devices": "Get all the registered devices",
              "read:device": "Get the device with the given deviceId",
              "read:appservices": "Get the list of services for a given application"
            }
          }
        }
      }
    }
  }
}
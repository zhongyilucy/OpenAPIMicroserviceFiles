{
  "openapi": "3.0.1",
  "info": {
    "title": "Account Authentication",
    "description": "API will be used to Authenticate the customer using the authenticate data (i.e. Card Number & PIN.).",
    "contact": {
      "email": "Middlewareteam@nagarro.com"
    },
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "Authenticate"
    }
  ],
  "security": [
    {
      "PSUOAuth2Security": [
        "accounts"
      ],
      "TPPOAuth2Security": [
        "tpp_client_credential"
      ],
      "client_secret": [],
      "client_id": []
    }
  ],
  "paths": {
    "/authenticate": {
      "post": {
        "tags": [
          "Authenticate"
        ],
        "summary": "Customer account authentication",
        "description": "API will be used to Authenticate the customer using the authenticate data (i.e. Card Number & PIN.).",
        "operationId": "postAuthenticate",
        "parameters": [
          {
            "name": "msgType",
            "in": "header",
            "example": "Request",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reqID",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chSysID",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "funcID",
            "in": "header",
            "example": "FUND_TXFR_VAL",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userID",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "txnRef",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "corrTxnRef",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "txnDate",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "custGrpID",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "custNIN",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entID",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sysID",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "custID",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "txnStatus",
            "in": "header",
            "example": "Y",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sessLang",
            "in": "header",
            "example": "E",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "verNo",
            "in": "header",
            "example": 10,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sessToken",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request Body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/authenticateRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/authenticateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authenticateResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/authenticateResponse"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "authenticateRequest": {
        "required": [
          "requestId",
          "timestamp",
          "mobileNumber",
          "customerType",
          "name",
          "accountId",
          "type",
          "subType",
          "authType",
          "authPINLen",
          "kIndex",
          "authAccountId",
          "authBlock"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "type": "string",
            "minLength": 36,
            "maxLength": 36,
            "example": "EBC1e608143ae054e07ac58d4a2ec3ca22c",
            "description": "Unique request ID for each request"
          },
          "timestamp": {
            "type": "string",
            "minLength": 23,
            "maxLength": 23,
            "example": "2020-03-15 01:01:01.123",
            "description": "Time stamp of the request. yyyy-MM-dd HH:mm:ss.SSS"
          },
          "customerType": {
            "type": "string",
            "example": "CONSUMER",
            "description": "Valid Values CONSUMER|MERCHANT",
            "enum": [
              "CONSUMER",
              "MERCHANT"
            ]
          },
          "customerReference": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "example": "J66012589",
            "description": "Customer unique reference number generated from bank for each customer (Exists only in case of Reset IPN PIN customer authentication)"
          },
          "settlementCycleId": {
            "type": "string",
            "minLength": 9,
            "maxLength": 11,
            "example": "2510201012A",
            "description": "Settlement cycle ID generated from IPN"
          },
          "ac": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "ACCOUNT",
                "description": "Account Type.ACCOUNT | WALLET | CARD",
                "enum": [
                  "ACCOUNT",
                  "WALLET",
                  "CARD"
                ]
              },
              "subType": {
                "type": "string",
                "example": "SAVING",
                "description": "Account subtype.SAVING | CHECKING | PREPAID |OVERDRAFT",
                "enum": [
                  "SAVING",
                  "CHECKING",
                  "PREPAID",
                  "OVERDRAFT"
                ]
              },
              "accountId": {
                "type": "string",
                "minLength": 4,
                "maxLength": 36,
                "example": "123456789",
                "description": "Account ID (account number to be authenticated in case of Reset IPN PIN)"
              },
              "name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100,
                "example": "Hari Danda",
                "description": "Account holder name"
              },
              "authType": {
                "type": "string",
                "example": "ATMPIN",
                "description": "Authentication PIN type.ATMPIN | M_PIN | IBC",
                "enum": [
                  "ATMPIN",
                  "M_PIN",
                  "IBC"
                ]
              },
              "authPINLen": {
                "type": "string",
                "example": "6",
                "description": "Authentication PIN Length.Values: 4 | 6| 8",
                "enum": [
                  "4",
                  "6",
                  "8"
                ]
              }
            }
          },
          "mobileNumber": {
            "type": "string",
            "minLength": 14,
            "maxLength": 14,
            "example": "00201012345678",
            "description": "Mobile number of the customer"
          },
          "credmessage": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "example": "AUTHENTICATION",
                "description": "Cred Message Type.AUTHENTICATION",
                "enum": [
                  "AUTHENTICATION"
                ]
              },
              "kIndex": {
                "type": "string",
                "minLength": 8,
                "maxLength": 8,
                "example": "20200212",
                "description": "Key Index(YYYYMMDD)"
              },
              "authAccountId": {
                "type": "string",
                "minLength": 1,
                "maxLength": 50,
                "example": "9848022338",
                "description": "auth account id (Card/Wallet number to be used for customer authentication, and identifying the customerReference)"
              },
              "authBlock": {
                "type": "string",
                "minLength": 1,
                "maxLength": 32,
                "example": "A6013F1789A00AC762D177DC3F1789A0 ",
                "description": "Hex data contains PIN block or wallet mpin block under the ZPK"
              }
            }
          }
        }
      },
      "authenticateResponse": {
        "required": [
          "requestId",
          "timestamp",
          "respCode",
          "respDesc",
          "customerReference"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "type": "string",
            "minLength": 36,
            "maxLength": 36,
            "example": "EBC1e608143ae054e07ac58d4a2ec3ca22c",
            "description": "Echo back from the request"
          },
          "timestamp": {
            "type": "string",
            "minLength": 23,
            "maxLength": 23,
            "example": "2020-03-15 01:01:01.123",
            "description": "Time stamp of the response. yyyy-MM-dd HH:mm:ss.SSS"
          },
          "respCode": {
            "type": "string",
            "minLength": 5,
            "maxLength": 5,
            "example": "00000",
            "description": "Response code"
          },
          "respDesc": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "example": "SUCCESS",
            "description": "Response Description"
          },
          "customerReference": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "example": "J66012589",
            "description": "Customer unique reference number,that shall be used in the account list call to retrieve the customer accounts"
          },
          "authenticationApprovalToken": {
            "type": "string",
            "minLength": 1,
            "maxLength": 36,
            "example": "7470d864d08",
            "description": "Shall be echoed from the authentication call bank’s response, if exists"
          }
        }
      },
      "errorResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Invalid - Request did not confirm to the specification and was unprocessed and rejected. Please fix the value and try again",
            "enum": [
              "error",
              "warn",
              "invalid",
              "fatal"
            ]
          },
          "code": {
            "description": "Error code which qualifies the error",
            "type": "string"
          },
          "details": {
            "description": "Human readable explanation specific to the occurrence of the problem",
            "type": "string"
          },
          "moreInfo": {
            "type": "string",
            "description": "URI to human readable documentation of the error"
          }
        },
        "required": [
          "type",
          "code"
        ],
        "xml": {
          "name": "errorResponse"
        }
      }
    },
    "securitySchemes": {
      "client_secret": {
        "type": "apiKey",
        "description": "",
        "name": "Client-Secret",
        "in": "header"
      },
      "client_id": {
        "type": "apiKey",
        "description": "",
        "name": "Client-Id",
        "in": "header"
      },
      "PSUOAuth2Security": {
        "type": "oauth2",
        "description": "OAuth flow, it is required when the consumer needs to access a resource owned by the AUB with the help of token.",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://$(aub-authorize-url)",
            "tokenUrl": "https://$(aub-token-url)",
            "scopes": {
              "accounts": "Ability to read Accounts information",
              "openid": ""
            }
          }
        },
        "x-tokenIntrospect": {
          "url": "https://$(aub-introspect-url)"
        }
      },
      "TPPOAuth2Security": {
        "type": "oauth2",
        "description": "TPP client credential authorisation flow with the AUB",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://$(aub-token-url)",
            "scopes": {
              "tpp_client_credential": "TPP Client Credential Scope"
            }
          }
        },
        "x-tokenIntrospect": {
          "url": "https://$(aub-introspect-url)"
        }
      }
    }
  }
}
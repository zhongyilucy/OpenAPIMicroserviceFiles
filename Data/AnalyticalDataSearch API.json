{
  "openapi": "3.0.1",
  "info": {
    "title": "AnalyticalDataSearch API",
    "description": "The Analytical Data Search allows search operations on data records.",
    "version": "1.0_preview"
  },
  "paths": {
    "/api/v1/search": {
      "post": {
        "tags": [
          "AnalyticalDataSearch"
        ],
        "summary": "Search analytical data. Only the last version of the found data records will be returned.\r\nThere is only one exception, when using the VersionNo field, you will also get other versions beside latest version.\r\nThis is a POST endpoint instead of a GET endpoint, in order to take adavantage of the request body and to reduce the URL complexity.",
        "description": "The supported searchable fields and corresponding operators for each of them are the following:\r\n            \r\nString fields:\r\n<ul><li> Name - eq, ne </li><li> State - eq, ne </li><li> Description - eq, ne </li><li> CreatedByUserFullName - eq, ne </li><li> LastUpdatedByUserFullName - eq, ne </li></ul>\r\nGuid fields:\r\n<ul><li> RecordId - eq, ne </li><li> FolderId - eq, ne </li><li> VersionId - eq, ne </li><li> CreatedById - eq, ne </li><li> LastUpdatedById - eq, ne </li><li> DataRecordTypeId - eq, ne </li></ul>\r\nInt fields:\r\n<ul><li> VersionNo -  eq, ne, lt, gt, le, ge </li></ul>\r\nDateTime fields:\r\n<ul><li> CreatedDate -  eq, ne, lt, gt, le, ge </li><li> LastUpdatedDate -  eq, ne, lt, gt, le, ge </li></ul>\r\n\r\n\r\nNote: eq = equal; ne = not equal; lt = less then; gt = greater than; le = less then or equal; ge = greater then or equal\r\nAlso, note that the * operator can be used for searching after a contained substring.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              },
              "examples": {
                "Search for records by Name starting with Analysis": {
                  "value": {
                    "filter": "Name eq \"Analysis*\"",
                    "orderBy": "CreatedDate DESC",
                    "top": 20,
                    "skip": 0
                  }
                },
                "Search for records by version ID": {
                  "value": {
                    "filter": "VersionId eq \"c6301529-56ad-48a8-83cd-7a8d9c983476\"",
                    "orderBy": "CreatedDate DESC",
                    "top": 20,
                    "skip": 0
                  }
                },
                "Search for published records by recordId ID": {
                  "value": {
                    "filter": "State eq \"PUBLISHED\" and RecordId eq \"86938608-75e7-4690-82b3-5801eb5f459a\"",
                    "orderBy": "CreatedDate DESC",
                    "top": 20,
                    "skip": 0
                  }
                },
                "Search for records by name created after 9th July 2000": {
                  "value": {
                    "filter": "Name eq \"Analysis*\" and CreatedDate gt \"2000-07-09\"",
                    "orderBy": null,
                    "top": 20,
                    "skip": 0
                  }
                },
                "Search for records acquired in July 2015": {
                  "value": {
                    "filter": "CreatedDate ge \"2015-07-01\" and CreatedDate lt \"2015-07-31\"",
                    "orderBy": null,
                    "top": 20,
                    "skip": 0
                  }
                },
                "Search for records that were created by user System": {
                  "value": {
                    "filter": "CreatedByUserFullName eq \"System\"",
                    "orderBy": null,
                    "top": 20,
                    "skip": 0
                  }
                },
                "Search for records that were created by a user that has his full name starting with 'Sys'": {
                  "value": {
                    "filter": "CreatedByUserFullName  eq \"Sys*\"",
                    "orderBy": null,
                    "top": 20,
                    "skip": 0
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Search executed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResultCollection"
                }
              }
            }
          },
          "400": {
            "description": "The client request is not valid. Possible error codes are * Validation - The request is not valid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "The request lacks valid authentication credentials. Possible error codes are * UnauthorizedAccess - The request lacks valid authentication credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Possible error codes are * InternalServerError - Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BaseDataRecordCategory": {
        "enum": [
          "SampleSet",
          "SampleList",
          "Analysis",
          "Method",
          "Report"
        ],
        "type": "string",
        "format": "int32"
      },
      "DataRecordProperties": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "The record name",
            "nullable": true,
            "example": "Sample 10"
          },
          "Description": {
            "type": "string",
            "description": "The record description",
            "nullable": true,
            "example": "My description for sample 10"
          },
          "VersionId": {
            "type": "string",
            "description": "The identifier of the version of the record.  It will be different for different versions of the same record.",
            "nullable": true,
            "example": "1da5861f-f15b-422b-9619-2e30004a665b"
          },
          "RecordId": {
            "type": "string",
            "description": "The identifier of the record, it remains the same for new versions of the record.",
            "nullable": true,
            "example": "947c98d1-c7c2-44c1-95fa-41988c36714e"
          },
          "DataRecordTypeId": {
            "type": "string",
            "description": "The record type identifier, e.g. Acquisition, MSRQ Processing etc",
            "nullable": true,
            "example": "50E20098FC5A4A998BA7FC211CE82848"
          },
          "DataRecordTypeName": {
            "type": "string",
            "description": "The record type name.",
            "nullable": true,
            "example": "AnalysisResult"
          },
          "BaseDataRecordCategory": {
            "$ref": "#/components/schemas/BaseDataRecordCategory"
          },
          "FolderId": {
            "type": "string",
            "description": "The folder identifier where the record is located",
            "nullable": true,
            "example": "228b7644-6626-4011-925e-daa360190b73"
          },
          "CreatedDateTime": {
            "type": "string",
            "description": "Date when the record was created on the server (ISO 8601, UTC +offset, ISO8601 format)",
            "format": "date-time",
            "example": "1997-07-16T19:20:30.45+01:00"
          },
          "LastUpdatedDateTime": {
            "type": "string",
            "description": "Date when the record was last modified on the server (ISO 8601, UTC + offset, ISO8601 format). \r\nThe value can be null if the version had not been modified.",
            "format": "date-time",
            "nullable": true,
            "example": "1997-07-16T19:20:30.45+01:00"
          },
          "VersionNo": {
            "type": "integer",
            "description": "The record version number. Starts at 1 when created, then increments only when the record is edited (goes from PUBLISHED to DRAFT state)",
            "format": "int32",
            "nullable": true,
            "example": 3
          },
          "ModificationVersion": {
            "type": "integer",
            "description": "Modification version. Starts at 1 for each new VersionNo of the record   and is incremented with each operation that modifies the record, until the record is published.",
            "format": "int32",
            "nullable": true,
            "example": 10
          },
          "CreatedById": {
            "type": "string",
            "description": "Identifier of the user that created the record",
            "nullable": true,
            "example": "fa3533d5-edca-493c-a881-7a5fd622dd48"
          },
          "CreatedByUserFullName": {
            "type": "string",
            "description": "Username associated with the user that created the record",
            "nullable": true,
            "example": "jbloggs"
          },
          "LastUpdatedById": {
            "type": "string",
            "description": "Identifier of the user that last updated the record",
            "nullable": true,
            "example": "bc1113d5-edca-493c-a881-7a5fd622dd32"
          },
          "LastUpdatedByUserFullName": {
            "type": "string",
            "description": "Username associated with the user that last modified the record",
            "nullable": true,
            "example": "benloggs"
          },
          "State": {
            "$ref": "#/components/schemas/State"
          },
          "Locked": {
            "type": "boolean",
            "description": "Record Locked flag",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The data record properties."
      },
      "Error": {
        "required": [
          "ErrorDetails",
          "ErrorToken",
          "Message"
        ],
        "type": "object",
        "properties": {
          "ErrorToken": {
            "minLength": 1,
            "type": "string",
            "description": "A Guid token to allow the identification of the error inside the API logs (Guid format: B4A2E7D90C5C4E18A466DCAD9625606E)",
            "readOnly": true
          },
          "Message": {
            "minLength": 1,
            "type": "string",
            "description": "Consumer friendly message describing the error"
          },
          "ErrorDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorDetails"
            },
            "description": "Errors information",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Error data transfer object containing error information specific for endpoints"
      },
      "ErrorCodes": {
        "enum": [
          "InternalServerError",
          "Validation",
          "UnauthorizedAccess"
        ],
        "type": "string",
        "description": "Error codes that map to handled error use-cases inside API",
        "format": "int32"
      },
      "ErrorDetails": {
        "required": [
          "Details",
          "ErrorCode"
        ],
        "type": "object",
        "properties": {
          "ErrorCode": {
            "$ref": "#/components/schemas/ErrorCodes"
          },
          "Details": {
            "minLength": 1,
            "type": "string",
            "description": "Human-readable description of the specific error"
          }
        },
        "additionalProperties": false,
        "description": "Error model containing detailed error information specific for endpoints"
      },
      "SearchRequest": {
        "required": [
          "Filter"
        ],
        "type": "object",
        "properties": {
          "Filter": {
            "minLength": 1,
            "type": "string",
            "description": "The filter expression. The following operators are supported. \r\n* eq - equal  \r\n* ne - not equal  \r\n* gt - greater than  \r\n* ge - grater than or equal to  \r\n* lt - less than  \r\n* le - less than or equal to \r\n* and - logical and  \r\n* or - logical or  \r\n* '*' wildcard - the field contains a given substring",
            "example": "Name eq \"Analysis*\""
          },
          "OrderBy": {
            "type": "string",
            "description": "(Optional). Sorting parameter. This can include the order direction of ascending (ASC) or descending (DESC). Direction defaults to ASC.",
            "nullable": true,
            "example": "LastUpdatedDateTime DESC"
          },
          "Top": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "(Optional). The maximum number of items to be included in the search result.",
            "format": "int32",
            "example": 20
          },
          "Skip": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "(Optional). The number of data records to skip.",
            "format": "int32",
            "example": 100
          }
        },
        "additionalProperties": false,
        "description": "The search request."
      },
      "SearchResultCollection": {
        "type": "object",
        "properties": {
          "Count": {
            "type": "integer",
            "description": "The total number of found records",
            "format": "int32",
            "nullable": true,
            "example": 10
          },
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataRecordProperties"
            },
            "description": "Gets or Sets Items",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of data records that match the search criteria."
      },
      "State": {
        "enum": [
          "DRAFT",
          "SUPERSEDED",
          "NOTUSABLE",
          "PUBLISHED"
        ],
        "type": "string",
        "format": "int32"
      }
    },
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://cdprd-lkgd-40:48333/connect/authorize",
            "tokenUrl": "https://cdprd-lkgd-40:48333/connect/token",
            "scopes": {
              "swagger": "swagger"
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "oauth2": [
        "swagger"
      ]
    }
  ]
}